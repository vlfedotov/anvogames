'use strict';

exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var errorLoading = function errorLoading(err) {
  return console.error('asyncComponent: Loading failed', err);
};
var isFunction = function isFunction(func) {
  return Object.prototype.toString.call(func) === '[object Function]';
};
var isPromise = function isPromise(obj) {
  return !!obj && ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' || typeof obj === 'function') && typeof obj.then === 'function';
};

exports.default = function (loader) {
  var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  var placeholder = _ref.placeholder;

  var asyncComponent = function (_Component) {
    _inherits(asyncComponent, _Component);

    function asyncComponent() {
      _classCallCheck(this, asyncComponent);

      var _this = _possibleConstructorReturn(this, _Component.call(this));

      _this.state = {
        component: null
      };
      _this.mounting = true;
      return _this;
    }

    asyncComponent.prototype.componentDidMount = function componentDidMount() {
      var _this2 = this;

      if (!isFunction(loader)) {
        return console.error('asyncComponent: Loader is not function');
      }

      var component = loader();

      if (!isPromise(component)) {
        return console.error('asyncComponent: Loader doesn\'t return a promise');
      }

      component.then(function (module) {
        return _this2.mounting && _this2.setState({ component: module.default || module });
      }).catch(errorLoading);
    };

    asyncComponent.prototype.componentWillUnmount = function componentWillUnmount() {
      this.mounting = false;
    };

    asyncComponent.prototype.render = function render() {
      if (this.state.component) {
        return _react2.default.createElement(this.state.component, this.props);
      }

      return placeholder || null;
    };

    return asyncComponent;
  }(_react.Component);

  return asyncComponent;
};